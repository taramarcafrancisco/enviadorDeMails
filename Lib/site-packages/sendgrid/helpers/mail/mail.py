import os
import csv
from itertools import islice
from sendgrid import SendGridAPIClient
from sendgrid.helpers.mail import Mail, From, To, Personalization

SENDGRID_API_KEY = os.getenv("SENDGRID_API_KEY")  # export SENDGRID_API_KEY="TU_CLAVE"
TEMPLATE_ID = "d-xxxxxxxxxxxxxxxxxxxx"  # reemplaza con tu template
FROM_EMAIL = "noreply@tu-dominio.com"
FROM_NAME = "Mi Empresa"
CSV_PATH = "destinatarios.csv"
BATCH_SIZE = 500  # máximo recomendado por lote

def chunked(iterable, size):
    it = iter(iterable)
    while True:
        chunk = list(islice(it, size))
        if not chunk:
            return
        yield chunk

def build_personalization(row):
    p = Personalization()
    p.add_to(To(email=row["email"]))

    dyn = {
        "first_name": row.get("first_name", ""),
        "company": row.get("company", "Mi Empresa")
    }

    has_discount = (row.get("has_discount") or "").strip().lower() in ("1","true","si","sí","yes","y")
    dyn["has_discount"] = has_discount
    if has_discount:
        dyn["discount"] = int(row.get("discount", "10"))

    p.dynamic_template_data = dyn
    return p

def load_rows(csv_path):
    with open(csv_path, newline="", encoding="utf-8") as f:
        reader = csv.DictReader(f)
        for row in reader:
            if row.get("email"):
                yield row

def send_batch(sg, rows):
    message = Mail()
    message.from_email = From(FROM_EMAIL, FROM_NAME)
    message.template_id = TEMPLATE_ID

    for row in rows:
        message.add_personalization(build_personalization(row))

    response = sg.client.mail.send.post(request_body=message.get())
    return response.status_code

def main():
    sg = SendGridAPIClient(api_key=SENDGRID_API_KEY)
    rows = list(load_rows(CSV_PATH))

    total = 0
    for chunk in chunked(rows, BATCH_SIZE):
        status = send_batch(sg, chunk)
        if status not in (200, 202):
            print(f"Error al enviar batch, status={status}")
        total += len(chunk)

    print(f"Se enviaron {total} correos.")

if __name__ == "__main__":
    main()
